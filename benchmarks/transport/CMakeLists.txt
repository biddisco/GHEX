# Variable used for benchmarks that DO NOT require multithreading support
set(_benchmarks ghex_p2p_bi_cb_avail ghex_p2p_bi_cb_wait ghex_p2p_bi_ft_avail ghex_p2p_bi_ft_wait ghex_p2p_pp_ft_avail)

# Variable used for benchmarks that require multithreading support
set(_benchmarks_mt ghex_p2p_bi_cb_avail ghex_p2p_bi_cb_wait ghex_p2p_bi_ft_avail ghex_p2p_bi_ft_wait ghex_p2p_pp_ft_avail)
set(_benchmarks_mpi mpi_p2p_bi_avail_mt)

foreach (_t ${_benchmarks})
    add_executable(${_t} ${_t}_mt.cpp )
    target_compile_definitions(${_t} PRIVATE USE_POOL_ALLOCATOR)
    target_link_libraries(${_t} ghexlib)
endforeach()

if (OpenMP_FOUND)
    foreach (_t ${_benchmarks_mt})
        add_executable(${_t}_mt ${_t}_mt.cpp )
        target_compile_definitions(${_t}_mt PRIVATE USE_OPENMP USE_POOL_ALLOCATOR)
        target_link_libraries(${_t}_mt ghexlib OpenMP::OpenMP_CXX)
    endforeach()

    foreach (_t ${_benchmarks_mpi})
        add_executable(${_t} ${_t}.cpp )
        target_compile_definitions(${_t} PRIVATE USE_OPENMP USE_POOL_ALLOCATOR)
        target_link_libraries(${_t} ghexlib OpenMP::OpenMP_CXX)

        add_executable(${_t}_testany ${_t}.cpp )
        target_compile_definitions(${_t}_testany PRIVATE USE_OPENMP USE_POOL_ALLOCATOR TEST_ANY)
        target_link_libraries(${_t}_testany ghexlib OpenMP::OpenMP_CXX)
    endforeach()
endif()

if (GHEX_USE_UCP)
   foreach (_t ${_benchmarks})
        add_executable(${_t}_ucx ${_t}_mt.cpp )
        target_compile_definitions(${_t}_ucx PRIVATE USE_POOL_ALLOCATOR USE_UCP)
        target_link_libraries(${_t}_ucx ghexlib)
        if (GHEX_USE_PMIX)
            target_compile_definitions(${_t}_ucx PRIVATE GHEX_USE_PMI)
        endif()
    endforeach()

    if (OpenMP_FOUND)
        foreach (_t ${_benchmarks_mt})
            add_executable(${_t}_mt_ucx ${_t}_mt.cpp )
            target_compile_definitions(${_t}_mt_ucx PRIVATE USE_OPENMP USE_POOL_ALLOCATOR USE_UCP)
            target_link_libraries(${_t}_mt_ucx ghexlib OpenMP::OpenMP_CXX)
            if (GHEX_USE_PMIX)
                target_compile_definitions(${_t}_mt_ucx PRIVATE GHEX_USE_PMI)
            endif()
        endforeach()
    endif()
endif()

if (GHEX_USE_LIBFABRIC)
   foreach (_t ${_benchmarks})
        add_executable(${_t}_libfabric ${_t}_mt.cpp )
        target_compile_definitions(${_t}_libfabric PRIVATE USE_POOL_ALLOCATOR USE_LIBFABRIC)
        target_link_libraries(${_t}_libfabric ghexlib)
        if (GHEX_USE_PMIX)
            target_compile_definitions(${_t}_libfabric PRIVATE GHEX_USE_PMI)
        endif()
    endforeach()

    if (OpenMP_FOUND)
        foreach (_t ${_benchmarks_mt})
            add_executable(${_t}_mt_libfabric ${_t}_mt.cpp )
            target_compile_definitions(${_t}_mt_libfabric PRIVATE USE_OPENMP USE_POOL_ALLOCATOR USE_LIBFABRIC)
            target_link_libraries(${_t}_mt_libfabric ghexlib OpenMP::OpenMP_CXX)
            if (GHEX_USE_PMIX)
                target_compile_definitions(${_t}_mt_libfabric PRIVATE GHEX_USE_PMI)
            endif()
        endforeach()
    endif()
endif()
